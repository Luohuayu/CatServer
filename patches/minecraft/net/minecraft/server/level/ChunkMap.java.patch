--- a/net/minecraft/server/level/ChunkMap.java
+++ b/net/minecraft/server/level/ChunkMap.java
@@ -108,7 +_,7 @@
    public static final int f_140127_ = 33 + ChunkStatus.m_62421_();
    public static final int f_143033_ = 31;
    private final Long2ObjectLinkedOpenHashMap<ChunkHolder> f_140129_ = new Long2ObjectLinkedOpenHashMap<>();
-   private volatile Long2ObjectLinkedOpenHashMap<ChunkHolder> f_140130_ = this.f_140129_.clone();
+   public volatile Long2ObjectLinkedOpenHashMap<ChunkHolder> f_140130_ = this.f_140129_.clone();
    private final Long2ObjectLinkedOpenHashMap<ChunkHolder> f_140131_ = new Long2ObjectLinkedOpenHashMap<>();
    private final LongSet f_140132_ = new LongOpenHashSet();
    final ServerLevel f_140133_;
@@ -122,18 +_,19 @@
    private final ChunkTaskPriorityQueueSorter f_140141_;
    private final ProcessorHandle<ChunkTaskPriorityQueueSorter.Message<Runnable>> f_140142_;
    private final ProcessorHandle<ChunkTaskPriorityQueueSorter.Message<Runnable>> f_140143_;
-   private final ChunkProgressListener f_140144_;
+   public final ChunkProgressListener f_140144_;
    private final ChunkStatusUpdateListener f_143031_;
-   private final ChunkMap.DistanceManager f_140145_;
+   public final ChunkMap.DistanceManager f_140145_;
    private final AtomicInteger f_140146_ = new AtomicInteger();
    private final StructureManager f_140147_;
    private final String f_182284_;
    private final PlayerMap f_140149_ = new PlayerMap();
-   private final Int2ObjectMap<ChunkMap.TrackedEntity> f_140150_ = new Int2ObjectOpenHashMap<>();
+   public final Int2ObjectMap<ChunkMap.TrackedEntity> f_140150_ = new Int2ObjectOpenHashMap<>();
    private final Long2ByteMap f_140151_ = new Long2ByteOpenHashMap();
    private final Long2LongMap f_202981_ = new Long2LongOpenHashMap();
    private final Queue<Runnable> f_140125_ = Queues.newConcurrentLinkedQueue();
    int f_140126_;
+   public final catserver.server.utils.CatServerCallbackExecutor callbackExecutor = new catserver.server.utils.CatServerCallbackExecutor(); // CatServer
 
    public ChunkMap(ServerLevel p_143040_, LevelStorageSource.LevelStorageAccess p_143041_, DataFixer p_143042_, StructureManager p_143043_, Executor p_143044_, BlockableEventLoop<Runnable> p_143045_, LightChunkGetter p_143046_, ChunkGenerator p_143047_, ChunkProgressListener p_143048_, ChunkStatusUpdateListener p_143049_, Supplier<DimensionDataStorage> p_143050_, int p_143051_, boolean p_143052_) {
       super(p_143041_.m_197394_(p_143040_.m_46472_()).resolve("region"), p_143042_, p_143052_);
@@ -476,6 +_,7 @@
             if (this.f_140131_.remove(p_140182_, p_140183_) && p_203002_ != null) {
                if (p_203002_ instanceof LevelChunk) {
                   ((LevelChunk)p_203002_).m_62913_(false);
+                  net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.ChunkEvent.Unload(p_203002_));
                }
 
                this.m_140258_(p_203002_);
@@ -630,7 +_,21 @@
 
    private static void m_143064_(ServerLevel p_143065_, List<CompoundTag> p_143066_) {
       if (!p_143066_.isEmpty()) {
-         p_143065_.m_143327_(EntityType.m_147045_(p_143066_, p_143065_));
+         // CraftBukkit start - these are spawned serialized (DefinedStructure) and we don't call an add event below at the moment due to ordering complexities
+         p_143065_.m_143327_( EntityType.m_147045_( p_143066_, p_143065_ ).filter( (entity) -> {
+            boolean needsRemoval = false;
+            net.minecraft.server.dedicated.DedicatedServer server = p_143065_.getCraftServer().getServer();
+            if (!server.m_6997_() && entity instanceof net.minecraft.world.entity.npc.Npc) {
+               entity.m_146870_();
+               needsRemoval = true;
+            }
+            if (!server.m_6998_() && (entity instanceof net.minecraft.world.entity.animal.Animal || entity instanceof net.minecraft.world.entity.animal.WaterAnimal)) {
+               entity.m_146870_();
+               needsRemoval = true;
+            }
+            return !needsRemoval;
+         } ) );
+         // CraftBukkit end
       }
 
    }
@@ -658,8 +_,14 @@
             levelchunk.m_62952_();
             if (this.f_140132_.add(chunkpos.m_45588_())) {
                levelchunk.m_62913_(true);
+               try {
+               p_140384_.currentlyLoading = levelchunk; // Forge - bypass the future chain when getChunk is called, this prevents deadlocks.
                levelchunk.m_156369_();
                levelchunk.m_187958_(this.f_140133_);
+               net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.ChunkEvent.Load(levelchunk));
+               } finally {
+                   p_140384_.currentlyLoading = null; // Forge - Stop bypassing the future chain.
+               }
             }
 
             return levelchunk;
@@ -762,6 +_,7 @@
 
             this.f_140133_.m_46473_().m_6174_("chunkSave");
             CompoundTag compoundtag = ChunkSerializer.m_63454_(this.f_140133_, p_140259_);
+            net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.ChunkDataEvent.Save(p_140259_, p_140259_.getWorldForge() != null ? p_140259_.getWorldForge() : this.f_140133_, compoundtag));
             this.m_63502_(chunkpos, compoundtag);
             this.m_140229_(chunkpos, chunkstatus.m_62494_());
             return true;
@@ -818,6 +_,7 @@
 
    protected void m_183754_(ServerPlayer p_183755_, ChunkPos p_183756_, MutableObject<ClientboundLevelChunkWithLightPacket> p_183757_, boolean p_183758_, boolean p_183759_) {
       if (p_183755_.f_19853_ == this.f_140133_) {
+         net.minecraftforge.event.ForgeEventFactory.fireChunkWatch(p_183758_, p_183759_, p_183755_, p_183756_, this.f_140133_);
          if (p_183759_ && !p_183758_) {
             ChunkHolder chunkholder = this.m_140327_(p_183756_.m_45588_());
             if (chunkholder != null) {
@@ -894,12 +_,23 @@
    }
 
    boolean m_183879_(ChunkPos p_183880_) {
+      // Spigot start
+      return anyPlayerCloseEnoughForSpawning(p_183880_, false);
+   }
+
+   boolean anyPlayerCloseEnoughForSpawning(ChunkPos p_183880_,  boolean reducedRange) {
+      int chunkRange = f_140133_.spigotConfig.mobSpawnRange;
+      chunkRange = (chunkRange > f_140133_.spigotConfig.viewDistance) ? (byte) f_140133_.spigotConfig.viewDistance : chunkRange;
+      chunkRange = (chunkRange > 8) ? 8 : chunkRange;
+
+      double blockRange = (reducedRange) ? Math.pow(chunkRange << 4, 2) : 16384.0D;
+      // Spigot end
       long i = p_183880_.m_45588_();
       if (!this.f_140145_.m_140847_(i)) {
          return false;
       } else {
          for(ServerPlayer serverplayer : this.f_140149_.m_183926_(i)) {
-            if (this.m_183751_(serverplayer, p_183880_)) {
+            if (this.playerIsCloseEnoughForSpawning(serverplayer, p_183880_, blockRange)) {
                return true;
             }
          }
@@ -916,7 +_,7 @@
          Builder<ServerPlayer> builder = ImmutableList.builder();
 
          for(ServerPlayer serverplayer : this.f_140149_.m_183926_(i)) {
-            if (this.m_183751_(serverplayer, p_183889_)) {
+            if (this.playerIsCloseEnoughForSpawning(serverplayer, p_183889_, 16384.0D)) { // Spigot
                builder.add(serverplayer);
             }
          }
@@ -926,11 +_,15 @@
    }
 
    private boolean m_183751_(ServerPlayer p_183752_, ChunkPos p_183753_) {
+      return this.playerIsCloseEnoughForSpawning(p_183752_, p_183753_, 16384.0D); // CatServer
+   }
+
+   private boolean playerIsCloseEnoughForSpawning(ServerPlayer p_183752_, ChunkPos p_183753_, double range) { // Spigot
       if (p_183752_.m_5833_()) {
          return false;
       } else {
          double d0 = m_140226_(p_183753_, p_183752_);
-         return d0 < 16384.0D;
+         return d0 < range;
       }
    }
 
@@ -1070,9 +_,10 @@
    }
 
    protected void m_140199_(Entity p_140200_) {
-      if (!(p_140200_ instanceof EnderDragonPart)) {
+      if (!(p_140200_ instanceof net.minecraftforge.entity.PartEntity)) {
          EntityType<?> entitytype = p_140200_.m_6095_();
          int i = entitytype.m_20681_() * 16;
+         i = org.spigotmc.TrackingRange.getEntityTrackingRange(p_140200_, i); // Spigot
          if (i != 0) {
             int j = entitytype.m_20682_();
             if (this.f_140150_.containsKey(p_140200_.m_142049_())) {
@@ -1231,15 +_,15 @@
       }
    }
 
-   class TrackedEntity {
+   public class TrackedEntity {
       final ServerEntity f_140471_;
       final Entity f_140472_;
       private final int f_140473_;
       SectionPos f_140474_;
-      private final Set<ServerPlayerConnection> f_140475_ = Sets.newIdentityHashSet();
+      public final Set<ServerPlayerConnection> f_140475_ = Sets.newIdentityHashSet();
 
       public TrackedEntity(Entity p_140478_, int p_140479_, int p_140480_, boolean p_140481_) {
-         this.f_140471_ = new ServerEntity(ChunkMap.this.f_140133_, p_140478_, p_140480_, p_140481_, this::m_140489_);
+         this.f_140471_ = new ServerEntity(ChunkMap.this.f_140133_, p_140478_, p_140480_, p_140481_, this::m_140489_, f_140475_); // CraftBukkit
          this.f_140472_ = p_140478_;
          this.f_140473_ = p_140479_;
          this.f_140474_ = SectionPos.m_123194_(p_140478_);
@@ -1293,6 +_,11 @@
             double d1 = vec3.f_82479_ * vec3.f_82479_ + vec3.f_82481_ * vec3.f_82481_;
             double d2 = d0 * d0;
             boolean flag = d1 <= d2 && this.f_140472_.m_6459_(p_140498_);
+            // CraftBukkit start - respect vanish API
+            if (!p_140498_.getBukkitEntity().canSee(this.f_140472_.getBukkitEntity())) {
+               flag = false;
+            }
+            // CraftBukkit end
             if (flag) {
                if (this.f_140475_.add(p_140498_.f_8906_)) {
                   this.f_140471_.m_8541_(p_140498_);
